/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) 
    {
        if(lists.length == 0)
        {
            return null;
        }

        if(lists.length == 1)
        {
            return lists[0];
        }

        Queue<ListNode> queue = new LinkedList<>();
        
        for(ListNode list : lists)
        {
            queue.add(list);
        }
        
        while(queue.size() > 1)
        {
            ListNode list1 = queue.poll();
            ListNode list2 = null;
            
            if(!queue.isEmpty())
            {
                list2 = queue.poll();
            }

            ListNode mergeList = merge(list1, list2);
            queue.add(mergeList);
        }

        return queue.poll();
    }
    
    public ListNode merge(ListNode list1, ListNode list2)
    {    
        ListNode head = new ListNode(0);
        ListNode temp = head;

        while(list1 != null && list2 != null)
        {
            if(list1.val < list2.val)
            {
                head.next = list1;
                list1 = list1.next;
            } 
            else 
            {
                head.next = list2;
                list2 = list2.next;
            }

            head = head.next;
        }

        if(list1 == null)
        {
            head.next = list2;
        }

        if(list2 == null)
        {
            head.next = list1;
        }

        return temp.next;
    }
}