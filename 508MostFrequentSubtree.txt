/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    HashMap<Integer,Integer> map = new HashMap();
    int maxFreq = 0;

    public int[] findFrequentTreeSum(TreeNode root) 
    {
        postorder(root);
        
        ArrayList<Integer> list = new ArrayList();
        
        for(int i : map.keySet())
        {
            if(map.get(i) == maxFreq)
            {
                list.add(i); 
            }
        }
        
        int[] array = new int[list.size()];

        for(int i=0; i<list.size(); i++)
        {
            array[i] = list.get(i);
        }

        return array;
    }
    
    public int postorder(TreeNode root)
    {
        if (root == null)
        {
            return 0;
        }
        
        int left = postorder(root.left);
        int right = postorder(root.right);      
        
        int sum = left + right + root.val;
        
        map.put(sum, map.getOrDefault(sum,0) + 1);

        maxFreq = Math.max(maxFreq, map.get(sum));
        
        return sum;
    }
}

