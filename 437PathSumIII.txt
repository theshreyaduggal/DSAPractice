/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    HashMap<Long, Integer> map = new HashMap<>();
    int count = 0;

    public int pathSum(TreeNode root, int targetSum) 
    {
        DFS(root, 0, targetSum);

        return count;    
    }

    public void DFS(TreeNode root, long sum, int targetSum) 
    {
        if (root == null) 
        {
            return;
        }
        
        sum = sum + root.val;
        
        if (map.containsKey(sum-targetSum)) 
        {
            count = count + map.get(sum-targetSum); 
        }
        
        if (targetSum == sum) 
        {
            count++;
        }

        map.put(sum, map.getOrDefault(sum, 0) + 1);

        DFS(root.left, sum, targetSum);
        DFS(root.right, sum, targetSum);

        map.put(sum, map.get(sum) - 1);
    }
}