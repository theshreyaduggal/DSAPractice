/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) 
    {
        if (root == null)
        {
            return 0;
        }    

        int maxWidth = 1;

        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> indexQueue = new LinkedList<>();

        queue.add(root);
        indexQueue.add(1);

        while (!queue.isEmpty())
        {
            int size = queue.size(); 
            int left = 0;
            int right = 0;

            for (int i=0; i<size; i++)
            {
                TreeNode node = queue.poll();
                int num = indexQueue.poll();

                if (i == 0)
                {
                    left = num;
                }

                if (i == size-1)
                {
                    right = num;
                }

                if (node.left != null)
                {
                    queue.add(node.left);
                    indexQueue.add(num*2);
                }

                if (node.right != null)
                {
                    queue.add(node.right);
                    indexQueue.add(num * 2 + 1);
                }
            }

            maxWidth = Math.max(maxWidth, right-left+1);
        }

        return maxWidth;
    }
}